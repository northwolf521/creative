/********************************************************************
**       This head file is generated by program,                   **
**            Please do not change it directly.                    **
********************************************************************/

#ifndef TORM_PROTOCOL_H
#define TORM_PROTOCOL_H


#ifndef TDR_METALIB_TORM_NET_VERSION 
#define TDR_METALIB_TORM_NET_VERSION 	17 /*version of metalib*/
#endif

#ifndef TDR_METALIB_TORM_NET_HASH 
#define TDR_METALIB_TORM_NET_HASH 	"85a7df41c03a6057f43bea600fe37a39" /*hash of metalib*/
#endif

/*   Define c types.   */
#ifndef TDR_CUSTOM_C_TYPES
#define TDR_CUSTOM_C_TYPES
    #include <stddef.h>
    #include <time.h>
    #include <sys/types.h>

    #if !defined(_WIN32) && !defined(_WIN64)

        #include <stdint.h>
        #include <inttypes.h>

    #else /*if !defined(_WIN32) && !defined(_WIN64)*/

        //The stdint declaras
        typedef  signed char  int8_t;
        typedef  short int16_t;
        typedef  int   int32_t;
        typedef unsigned char  uint8_t;
        typedef unsigned short uint16_t;
        typedef unsigned int   uint32_t;
        #if _MSC_VER >= 1300
            typedef unsigned long long 	uint64_t;
            typedef long long 	int64_t;
        #else /* _MSC_VER */
            typedef unsigned __int64	uint64_t;
            typedef __int64	int64_t;
        #endif /* _MSC_VER */

    #endif /*if !defined(_WIN32) && !defined(_WIN64)*/

    typedef int64_t tdr_longlong;
    typedef uint64_t tdr_ulonglong;
    typedef uint16_t tdr_wchar_t;  /**<Wchar基本数据类型*/
    typedef uint32_t tdr_date_t;	/**<data基本数据类型*/
    typedef uint32_t tdr_time_t;	/**<time基本数据类型*/
    typedef uint64_t tdr_datetime_t; /**<datetime基本数据类型*/
    typedef uint32_t tdr_ip_t;  /**<IPv4数据类型*/
#endif /*TDR_CUSTOM_C_TYPES*/


/*   User defined includes.   */


/*   User defined macros.   */
#define TORM_MAGIC                                       	30051
#define TORM_MAX_PKG_LEN                                 	1200000
#define TORM_MAX_BODY_LEN                                	1150000
#define TORM_MAX_SUBPACK_LEN                             	409600
#define TORM_MAX_SLIGHTPACK_LEN                          	20480
#define TORM_MAX_META_NAME                               	32
#define TORM_MAX_ENTRYLIST                               	256
#define TORM_MAX_WHERE_DEF                               	1024
#define TORM_MAX_INTER_CHANNEL                           	256
#define TORM_MAX_BUS_CHANNEL                             	1000
#define TORM_MAX_TABLE_NAME                              	256

/* TORM_RESFLAGS*/
enum tagTORM_RESFLAGS 
{
    TORM_RESFLAG_RET_NOINFO = 0, 	/* 不包含OperInfo返回 */
    TORM_RESFLAG_RET_WITHINFO = 1, 	/* 包含OperInfo返回 */
    TORM_RESFLAG_ERRRET_NOINFO = 2, 	/* 出错才返回不包含OperInfo返回 */
    TORM_RESFLAG_ERRRET_WITHINFO = 3, 	/* 出错才返回包含OperInfo返回 */
    TORM_RESFLAG_NORET = 4, 	/* 不需要返回响应消息 */
};
#define TORM_MAX_ASYNCALLBACK_DATA_LEN                   	1024 	/* 请求方能保留的回调数据最大字节数 */

/* TormCmds*/
enum tagTormCmds 
{
    TORM_EXGVER_REQ = 1, 	/* 进程间开始通信时的版本交换协议 */
    TORM_EXGVER_RES = 2, 
    TORM_INSERT_REQ = 3, 
    TORM_INSERT_RES = 4, 
    TORM_UPDATE_REQ = 5, 
    TORM_UPDATE_RES = 6, 
    TORM_DELETE_REQ = 7, 
    TORM_DELETE_RES = 8, 
    TORM_SELECT_REQ = 9, 
    TORM_SELECT_RES = 10, 
    TORM_SVRINFO_REQ = 11, 	/* 应用程序可能需要此协议获取OrmSvr的状态信息 */
    TORM_SVRINFO_RES = 12, 
    TORM_SELECT_COUNT_REQ = 13, 
    TORM_SELECT_COUNT_RES = 14, 
    TORM_SELECT_TABLE_REQ = 15, 
    TORM_SELECT_TABLE_RES = 16, 
};


/*   Structs/unions prototype.   */
struct tagTORMMetaNameVer;
typedef struct tagTORMMetaNameVer                                  	TORMMETANAMEVER;
typedef struct tagTORMMetaNameVer                                  	*LPTORMMETANAMEVER;

struct tagTORMPkgHeadComm;
typedef struct tagTORMPkgHeadComm                                  	TORMPKGHEADCOMM;
typedef struct tagTORMPkgHeadComm                                  	*LPTORMPKGHEADCOMM;

struct tagTORMPkgHeadCmd;
typedef struct tagTORMPkgHeadCmd                                   	TORMPKGHEADCMD;
typedef struct tagTORMPkgHeadCmd                                   	*LPTORMPKGHEADCMD;

struct tagTORMPkgHeadApp;
typedef struct tagTORMPkgHeadApp                                   	TORMPKGHEADAPP;
typedef struct tagTORMPkgHeadApp                                   	*LPTORMPKGHEADAPP;

struct tagTORMSubPack;
typedef struct tagTORMSubPack                                      	TORMSUBPACK;
typedef struct tagTORMSubPack                                      	*LPTORMSUBPACK;

struct tagTORMSlightPack;
typedef struct tagTORMSlightPack                                   	TORMSLIGHTPACK;
typedef struct tagTORMSlightPack                                   	*LPTORMSLIGHTPACK;

struct tagTORMPkgHead;
typedef struct tagTORMPkgHead                                      	TORMPKGHEAD;
typedef struct tagTORMPkgHead                                      	*LPTORMPKGHEAD;

struct tagTORMExgVerReq;
typedef struct tagTORMExgVerReq                                    	TORMEXGVERREQ;
typedef struct tagTORMExgVerReq                                    	*LPTORMEXGVERREQ;

struct tagTORMExgVerRes;
typedef struct tagTORMExgVerRes                                    	TORMEXGVERRES;
typedef struct tagTORMExgVerRes                                    	*LPTORMEXGVERRES;

struct tagTORMEntryNameList;
typedef struct tagTORMEntryNameList                                	TORMENTRYNAMELIST;
typedef struct tagTORMEntryNameList                                	*LPTORMENTRYNAMELIST;

struct tagTORMOperInfo;
typedef struct tagTORMOperInfo                                     	TORMOPERINFO;
typedef struct tagTORMOperInfo                                     	*LPTORMOPERINFO;

struct tagTORMInsertReq;
typedef struct tagTORMInsertReq                                    	TORMINSERTREQ;
typedef struct tagTORMInsertReq                                    	*LPTORMINSERTREQ;

struct tagTORMInsertRes;
typedef struct tagTORMInsertRes                                    	TORMINSERTRES;
typedef struct tagTORMInsertRes                                    	*LPTORMINSERTRES;

struct tagTORMUpdateReq;
typedef struct tagTORMUpdateReq                                    	TORMUPDATEREQ;
typedef struct tagTORMUpdateReq                                    	*LPTORMUPDATEREQ;

struct tagTORMUpdateRes;
typedef struct tagTORMUpdateRes                                    	TORMUPDATERES;
typedef struct tagTORMUpdateRes                                    	*LPTORMUPDATERES;

struct tagTORMDeleteReq;
typedef struct tagTORMDeleteReq                                    	TORMDELETEREQ;
typedef struct tagTORMDeleteReq                                    	*LPTORMDELETEREQ;

struct tagTORMDeleteRes;
typedef struct tagTORMDeleteRes                                    	TORMDELETERES;
typedef struct tagTORMDeleteRes                                    	*LPTORMDELETERES;

struct tagTORMSelectReq;
typedef struct tagTORMSelectReq                                    	TORMSELECTREQ;
typedef struct tagTORMSelectReq                                    	*LPTORMSELECTREQ;

struct tagTORMSelectResult;
typedef struct tagTORMSelectResult                                 	TORMSELECTRESULT;
typedef struct tagTORMSelectResult                                 	*LPTORMSELECTRESULT;

struct tagTORMSelectRes;
typedef struct tagTORMSelectRes                                    	TORMSELECTRES;
typedef struct tagTORMSelectRes                                    	*LPTORMSELECTRES;

struct tagTORMSelectTableReq;
typedef struct tagTORMSelectTableReq                               	TORMSELECTTABLEREQ;
typedef struct tagTORMSelectTableReq                               	*LPTORMSELECTTABLEREQ;

struct tagTORMSelectTableRes;
typedef struct tagTORMSelectTableRes                               	TORMSELECTTABLERES;
typedef struct tagTORMSelectTableRes                               	*LPTORMSELECTTABLERES;

struct tagTORMSvrInfoReq;
typedef struct tagTORMSvrInfoReq                                   	TORMSVRINFOREQ;
typedef struct tagTORMSvrInfoReq                                   	*LPTORMSVRINFOREQ;

struct tagTORMChannelInfo;
typedef struct tagTORMChannelInfo                                  	TORMCHANNELINFO;
typedef struct tagTORMChannelInfo                                  	*LPTORMCHANNELINFO;

struct tagTORMProcessInfo;
typedef struct tagTORMProcessInfo                                  	TORMPROCESSINFO;
typedef struct tagTORMProcessInfo                                  	*LPTORMPROCESSINFO;

struct tagTORMInterChannelInfo;
typedef struct tagTORMInterChannelInfo                             	TORMINTERCHANNELINFO;
typedef struct tagTORMInterChannelInfo                             	*LPTORMINTERCHANNELINFO;

struct tagTORMSvrInfoRes;
typedef struct tagTORMSvrInfoRes                                   	TORMSVRINFORES;
typedef struct tagTORMSvrInfoRes                                   	*LPTORMSVRINFORES;

struct tagTORMSelectCountReq;
typedef struct tagTORMSelectCountReq                               	TORMSELECTCOUNTREQ;
typedef struct tagTORMSelectCountReq                               	*LPTORMSELECTCOUNTREQ;

struct tagTORMSelectCountRes;
typedef struct tagTORMSelectCountRes                               	TORMSELECTCOUNTRES;
typedef struct tagTORMSelectCountRes                               	*LPTORMSELECTCOUNTRES;

union tagTORMPkgBody;
typedef union  tagTORMPkgBody                                      	TORMPKGBODY;
typedef union  tagTORMPkgBody                                      	*LPTORMPKGBODY;

struct tagTORMPkg;
typedef struct tagTORMPkg                                          	TORMPKG;
typedef struct tagTORMPkg                                          	*LPTORMPKG;

/*   Define structs/unions.   */
#pragma pack(1)

struct tagTORMMetaNameVer
{
    char MetaName[TORM_MAX_META_NAME];               
    uint32_t MetaVer;                                
};

struct tagTORMPkgHeadComm
{
    uint16_t Magic;                                  
    uint16_t HeadLen;                                
    uint32_t BodyLen;                                
    uint32_t InstID;                                  	/*   打包此协议的进程实体号 */
};

struct tagTORMPkgHeadCmd
{
    uint16_t Cmd;                                     	/*    Bind Macrosgroup:TormCmds,*/
    uint8_t Res[2];                                  
    TORMMETANAMEVER MetaNameVer;                      	/*   本次操作相关MetaName和版本信息 */
    uint32_t SplitFactor;                             	/*  Ver.14 tormapi内部使用，应用层不需为此字段赋值 */
};

/* 存储应用数据，tormsvr将请求消息中的内容不作改变地拷贝到响应消息 */
struct tagTORMPkgHeadApp
{
    int32_t AppCmd;                                   	/*   应用进程操作命令ID */
    int32_t Seq;                                      	/*   请求响应序号,由应用进程使用 */
    int32_t ObjID;                                    	/*   应用进程用于标识对象 */
};

struct tagTORMSubPack
{
    uint32_t SubPackLen;                             
    uint8_t SubPack[TORM_MAX_SUBPACK_LEN];           
};

struct tagTORMSlightPack
{
    uint32_t SlightPackLen;                          
    uint8_t SlightPack[TORM_MAX_SLIGHTPACK_LEN];     
};

struct tagTORMPkgHead
{
    uint16_t Version;                                 	/*  Ver.16 协议的版本号 */
    TORMPKGHEADCOMM HeadComm;                        
    TORMPKGHEADCMD HeadCmd;                          
    TORMPKGHEADAPP HeadApp;                          
    uint8_t Res[4];                                  
    TORMSLIGHTPACK SplitTableInfo;                    	/*  Ver.17 支持分表的信息,上层应用不需要填充，由ORMAPI自动生成 */
    int32_t AsynCallBackDataLen;                      	/*  Ver.11  */
    char AsynCallBackData[TORM_MAX_ASYNCALLBACK_DATA_LEN]; 	/*  Ver.11 TORMSVR会将请求消息 中此字段中的信息原封不动地放到响应消息中，这样请求方可使用此字段保留回调数据  */
};

struct tagTORMExgVerReq
{
    uint32_t Version;                                
};

struct tagTORMExgVerRes
{
    uint32_t Version;                                
};

struct tagTORMEntryNameList
{
    uint32_t EntryNameNum;                           
    char EntryName[TORM_MAX_ENTRYLIST][TORM_MAX_META_NAME];
};

struct tagTORMOperInfo
{
    TORMSLIGHTPACK PriKeyInfo;                        	/*   主键信息,上层应用不需要填充，由ORMAPI自动生成 */
    TORMSLIGHTPACK SplitTableInfo;                    	/*   支持分表的信息,上层应用不需要填充，由ORMAPI自动生成 */
    TORMSUBPACK OperContent;                          	/*   操作数据信息,上层应用不需要填充，由ORMAPI自动生成 */
    uint32_t ResFlag;                                 	/*   响应方式, 缺省值为TORM_RESFLAG_RET_NOINFO Bind Macrosgroup:TORM_RESFLAGS,*/
    TORMENTRYNAMELIST EntryNameList;                  	/*   若EntryNameNum为0,则操作针对头部指定的Meta */
    char WhereDef[TORM_MAX_WHERE_DEF];                	/*   没有自定操作约束(where etc.),必须设置为空串;如果此字段不是空串，ORMAPI不会自动生成主键信息 */
};

struct tagTORMInsertReq
{
    TORMOPERINFO OperInfo;                           
};

struct tagTORMInsertRes
{
    int32_t ErrNo;                                    	/*   错误码参考torm_error.h */
    TORMOPERINFO OperInfo;                           
    int32_t DBMSErrNo;                                	/*  Ver.11 数据库返回的错误码 */
    uint64_t LastInsertID;                            	/*  Ver.12 返回本次insert操作所生成的AUTO_INCREMENT的值，此字段只有当操作数据中定义了AUTO_INCREMENT成员才有意义 */
};

struct tagTORMUpdateReq
{
    TORMOPERINFO OperInfo;                           
    uint32_t DoInsert;                                	/*  Ver.15 如果被更新的记录不存在，是否插入新纪录，不适用于自定义条件更新 */
};

struct tagTORMUpdateRes
{
    int32_t ErrNo;                                    	/*   错误码参考torm_error.h */
    TORMOPERINFO OperInfo;                           
    uint32_t DoInsert;                                	/*  Ver.15  */
    int32_t DBMSErrNo;                                	/*  Ver.11 数据库返回的错误码 */
    int32_t AffectRows;                               	/*  Ver.11 受影响的行数 */
};

struct tagTORMDeleteReq
{
    TORMOPERINFO OperInfo;                           
};

struct tagTORMDeleteRes
{
    int32_t ErrNo;                                    	/*   错误码参考torm_error.h */
    TORMOPERINFO OperInfo;                           
    int32_t DBMSErrNo;                                	/*  Ver.11 数据库返回的错误码 */
    int32_t AffectRows;                               	/*  Ver.11 受影响的行数 */
};

struct tagTORMSelectReq
{
    TORMOPERINFO OperInfo;                           
    uint32_t Limit;                                   	/*  Ver.14 如其值大于0则设置从数据库中检索出的最大记录行数,如果其值为0,则对记录行数没有限制 */
    uint32_t OffSet;                                  	/*  Ver.14 则设置返回的第一行记录在整个结果集中的偏移量(初始行的偏移量为0),如果其值为0，则从结果集的开头返回记录行 */
};

struct tagTORMSelectResult
{
    uint32_t ResultTotal;                            
    uint32_t ThisResultStart;                        
    int32_t ResultNum;                               
    TORMSUBPACK ResultList[1];                       
};

struct tagTORMSelectRes
{
    int32_t ErrNo;                                    	/*   错误码参考torm_error.h */
    TORMOPERINFO OperInfo;                           
    int32_t DBMSErrNo;                                	/*  Ver.11 数据库返回的错误码 */
    uint32_t Limit;                                   	/*  Ver.16 带回请求中的对应值 */
    uint32_t OffSet;                                  	/*  Ver.16 带回请求中的对应值 */
    TORMSELECTRESULT SelectResult;                   
};

struct tagTORMSelectTableReq
{
    TORMOPERINFO OperInfo;                           
    char TableName[TORM_MAX_TABLE_NAME];             
    uint32_t InsertCache;                             	/*   是否将结果加载到cache */
    uint32_t Limit;                                   	/*   如其值大于0则设置从数据库中检索出的最大记录行数,如果其值为0,则对记录行数没有限制 */
    uint32_t OffSet;                                  	/*   则设置返回的第一行记录在整个结果集中的偏移量(初始行的偏移量为0),如果其值为0，则从结果集的开头返回记录行 */
};

struct tagTORMSelectTableRes
{
    int32_t ErrNo;                                    	/*   错误码参考torm_error.h */
    TORMOPERINFO OperInfo;                           
    int32_t DBMSErrNo;                                	/*   数据库返回的错误码 */
    char TableName[TORM_MAX_TABLE_NAME];             
    uint32_t InsertCache;                             	/*   是否将结果加载到cache */
    uint32_t Limit;                                   	/*   带回请求中的对应值 */
    uint32_t OffSet;                                  	/*   带回请求中的对应值 */
    TORMSELECTRESULT SelectResult;                   
};

struct tagTORMSvrInfoReq
{
    int32_t Res;                                     
};

struct tagTORMChannelInfo
{
    int32_t ChannelIdx;                              
    int32_t UpSize;                                  
    int32_t UpHead;                                  
    int32_t UpTail;                                  
    int32_t DownSize;                                
    int32_t DownHead;                                
    int32_t DownTail;                                
};

struct tagTORMProcessInfo
{
    int32_t StartTime;                               
    int32_t DurTime;                                 
    int32_t InMsg;                                   
    int32_t InByte;                                  
    int32_t OutMsg;                                  
    int32_t OutByte;                                 
    int32_t Cache;                                   
};

struct tagTORMInterChannelInfo
{
    int32_t ChannelNum;                              
    TORMCHANNELINFO ChannelInfo[TORM_MAX_INTER_CHANNEL];
};

struct tagTORMSvrInfoRes
{
    TORMINTERCHANNELINFO InterChannelInfo;           
    TORMPROCESSINFO ProcessInfo;                     
};

/* 指定查询条件，请求tormsvr执行select count(*)操作，即请求检索出符合查询条件的记录行总数 */
struct tagTORMSelectCountReq
{
    char WhereDef[TORM_MAX_WHERE_DEF];                	/*   指定查询条件，如果为空串，则tormsvr会检索出指定数据对应数据库表中记录行总数 */
    TORMSLIGHTPACK SplitTableInfo;                    	/*   支持分表的信息,上层应用不需要填充，由ORMAPI自动生成 */
};

struct tagTORMSelectCountRes
{
    int32_t ErrNo;                                    	/*   错误码参考torm_error.h */
    int32_t DBMSErrNo;                                	/*  Ver.16 数据库返回的错误码 */
    uint32_t RowsCount;                               	/*   返回数据库表中匹配查询条件的记录行总数 */
    char WhereDef[TORM_MAX_WHERE_DEF];                	/*  Ver.16 带回原有的查询条件 */
};

union tagTORMPkgBody
{
    uint8_t MaxBody[TORM_MAX_BODY_LEN];              
    TORMEXGVERREQ ExgVerReq;                          	/* TORM_EXGVER_REQ,   */
    TORMEXGVERRES ExgVerRes;                          	/* TORM_EXGVER_RES,   */
    TORMINSERTREQ InsertReq;                          	/* TORM_INSERT_REQ,   */
    TORMINSERTRES InsertRes;                          	/* TORM_INSERT_RES,   */
    TORMUPDATEREQ UpdateReq;                          	/* TORM_UPDATE_REQ,   */
    TORMUPDATERES UpdateRes;                          	/* TORM_UPDATE_RES,   */
    TORMDELETEREQ DeleteReq;                          	/* TORM_DELETE_REQ,   */
    TORMDELETERES DeleteRes;                          	/* TORM_DELETE_RES,   */
    TORMSELECTREQ SelectReq;                          	/* TORM_SELECT_REQ,   */
    TORMSELECTRES SelectRes;                          	/* TORM_SELECT_RES,   */
    TORMSVRINFOREQ OrmSvrInfoReq;                     	/* TORM_SVRINFO_REQ,   */
    TORMSVRINFORES OrmSvrInfoRes;                     	/* TORM_SVRINFO_RES,   */
    TORMSELECTCOUNTREQ SelectCountReq;                	/* TORM_SELECT_COUNT_REQ, Ver.14  */
    TORMSELECTCOUNTRES SelectCountRes;                	/* TORM_SELECT_COUNT_RES, Ver.14  */
    TORMSELECTTABLEREQ SelectTableReq;                	/* TORM_SELECT_TABLE_REQ, Ver.16  */
    TORMSELECTTABLERES SelectTableRes;                	/* TORM_SELECT_TABLE_RES, Ver.16  */
};

struct tagTORMPkg
{
    TORMPKGHEAD Head;                                
    TORMPKGBODY Body;                                
};

#pragma pack()


#endif /* TORM_PROTOCOL_H */
